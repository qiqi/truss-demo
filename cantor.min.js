function Truss(a, b, c, d, e, f, g, h) { this.x0 = a, this.y0 = b, this.dx = c, this.dy = d, this.cap_dx = g, this.cap_dy = h, this.n = e, this.cells = f, this.recompute = function () { if (this.disp_cells = this.cells, 0 == this.dy && 0 == this.cap_dy) { var a = 4 * this.dx / Math.sqrt(3); this.x0 = 512 + (this.x0 - 512) % a; var b = 2 * (1 + Math.floor(2048 / a)) + this.cells % 2; this.disp_cells = Math.min(b, this.cells) } this.d2 = this.dx * this.dx + this.dy * this.dy, this.alpha = 1 / (2 + this.n), this.mirrored = this.cells % 2 == 0 ^ this.cap_dx * this.dy - this.cap_dy * this.dx > 0 }, this.recompute(), Truss.prototype.left = function () { var a = this.cap_dx * this.dx + this.cap_dy * this.dy, b = this.d2 / a * (1 - this.alpha), c = this.x0 - b * this.cap_dy, d = this.y0 + b * this.cap_dx, e = this.disp_cells * (2 + this.n); return new Truss(c, d, this.dx * this.alpha, this.dy * this.alpha, this.n, e, this.cap_dx, this.cap_dy) }, Truss.prototype.right = function () { var a = this.cap_dx * this.dx + this.cap_dy * this.dy, b = this.d2 / a * (1 - this.alpha), c = this.x0 + b * this.cap_dy, d = this.y0 - b * this.cap_dx, e = this.disp_cells * (2 + this.n); return new Truss(c, d, this.dx * this.alpha, this.dy * this.alpha, this.n, e, this.cap_dx, this.cap_dy) }, Truss.prototype.support = function (a) { var b = Math.sqrt(3) / 2, c = .5; a % 2 == 0 ^ this.mirrored && (c = -c); var e = this.alpha * (this.dx * c + this.dy * b), f = this.alpha * (this.dy * c - this.dx * b), g = this.x0 + a * this.dx / b, h = this.y0 + a * this.dy / b, i = this.dy * (1 - 2 * this.alpha), j = -this.dx * (1 - 2 * this.alpha), k = this.n; return new Truss(g, h, e, f, Math.round(2 * this.n), k, i, j) }, Truss.prototype.supports = function () { for (var a = [], b = 1 - this.disp_cells; b < this.disp_cells; ++b) a.push(this.support(b)); return a }, Truss.prototype.draw_raw = function (a) { var b = this.cap_dx * this.cap_dx + this.cap_dy * this.cap_dy, c = this.cap_dx * this.dx + this.cap_dy * this.dy, d = b / c + 1, e = Math.round(255 * (1 - Math.pow(this.alpha * (2 + n0), 1))); a.lineWidth = 2 * Math.sqrt(this.d2), a.strokeStyle = "rgb(" + e + "," + e + "," + e + ")", a.beginPath(), a.moveTo(this.x0 + d * this.dx, this.y0 + d * this.dy), a.lineTo(this.x0 - d * this.dx, this.y0 - d * this.dy), a.stroke(), a.closePath() }, Truss.prototype.position = function (a, b) { var c = a - this.x0, d = b - this.y0; return (c * this.dy - d * this.dx) / this.d2 }, Truss.prototype.draw = function (a) { var b = [this.position(0, 0), this.position(0, 768), this.position(1024, 0), this.position(1024, 768)]; if (!(Math.min.apply(null, b) > 1 || Math.max.apply(null, b) < -1)) if (this.d2 >= 2) { this.left().draw(a), this.right().draw(a); var c = this.supports(); for (var d in c) c[d].draw(a) } else this.draw_raw(a) } } function scale(a) { truss.x0 = 512 + (truss.x0 - 512) * a, truss.y0 = 364 + (truss.y0 - 364) * a, truss.dx *= a, truss.dy *= a, truss.cap_dx *= a, truss.cap_dy *= a, truss.recompute(), ctx.clearRect(0, 0, canvas.width, canvas.height), truss.draw(ctx) } function draw_scale() { var a = Math.pow(scale_zoom, scale_level), b = Math.round(Math.log(a) / Math.LN10); a /= Math.pow(10, b), ctx.fillStyle = "#000000", ctx.fillRect(1e3 - 100 * a, 0, 100 * a, 12); var c = ["m", "mm", "um", "nm", "pm", "fm"], d = Math.pow(10, (100 - b) % 3 - 1), e = c[Math.floor((b + 1) / 3)]; $("#text").html("" + d + e) } var canvas = document.getElementById("canvas"), ctx = canvas.getContext("2d"), n0 = parseInt(location.search.substr(1)); (isNaN(n0) || n0 < 1) && (n0 = 1); var truss = new Truss(512, 384, 256, 0, n0, 5, 1536, 0); truss.draw(ctx), $(canvas).css("cursor", "move"); var is_mouse_down = !1, last_mouse_x = 0, last_mouse_y = 0; canvas.addEventListener("mousedown", function (a) { is_mouse_down = !0, last_mouse_x = a.clientX, last_mouse_y = a.clientY }, !1), canvas.addEventListener("mouseup", function (a) { is_mouse_down = !1 }, !1), canvas.addEventListener("mousemove", function (a) { if (is_mouse_down) { var b = a.clientX - last_mouse_x, c = a.clientY - last_mouse_y; last_mouse_x = a.clientX, last_mouse_y = a.clientY, truss.x0 += b, truss.y0 += c, truss.recompute(), ctx.clearRect(0, 0, canvas.width, canvas.height), truss.draw(ctx), draw_scale() } }, !1); var is_touch_down = !1, last_touch_x = 0, last_touch_y = 0; canvas.addEventListener("touchstart", function (a) { is_touch_down = !0; var b = a.touches[0]; last_touch_x = b.clientX, last_touch_y = b.clientY }, !1), canvas.addEventListener("touchend", function (a) { is_touch_down = !1 }, !1), canvas.addEventListener("touchmove", function (a) { if (is_touch_down) { var b = a.touches[0], c = b.clientX - last_touch_x, d = b.clientY - last_touch_y; last_touch_x = b.clientX, last_touch_y = b.clientY, truss.x0 += c, truss.y0 += d, truss.recompute(), ctx.clearRect(0, 0, canvas.width, canvas.height), truss.draw(ctx), draw_scale() } }, !1); var scale_zoom = 1.5, scale_level = 0; draw_scale(), $("#zoomin").on("click touch", function () { scale(scale_zoom), ++scale_level, draw_scale() }), $("#zoomout").on("click touch", function () { scale_level > 0 && (scale(1 / scale_zoom), --scale_level, draw_scale()) });
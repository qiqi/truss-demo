var canvas = document.getElementById("canvas"); var ctx = canvas.getContext('2d'); var n0 = 1; function Truss(x0, y0, dx, dy, n, cells, cap_dx, cap_dy) {
    {
        this.x0 = x0; this.y0 = y0; this.dx = dx; this.dy = dy; this.cap_dx = cap_dx; this.cap_dy = cap_dy; this.n = n; this.cells = cells; this.recompute = function () {
            this.disp_cells = this.cells; if (this.dy == 0 && this.cap_dy == 0) { var cell_length = 4 * this.dx / Math.sqrt(3); this.x0 = 512 + (this.x0 - 512) % cell_length; var max_cells = (1 + Math.floor(2048 / cell_length)) * 2 + this.cells % 2; this.disp_cells = Math.min(max_cells, this.cells) }
            this.d2 = this.dx * this.dx + this.dy * this.dy; this.alpha = 1 / (2 + this.n); this.mirrored = (this.cells % 2 == 0) ^ (this.cap_dx * this.dy - this.cap_dy * this.dx > 0)
        }
        this.recompute()
    }
    Truss.prototype.left = function () { var denominator = this.cap_dx * this.dx + this.cap_dy * this.dy; var L = this.d2 / denominator * (1 - this.alpha); var x0 = this.x0 - L * this.cap_dy; var y0 = this.y0 + L * this.cap_dx; var cells = this.disp_cells * (2 + this.n); var dx = this.dx * this.alpha; var dy = this.dy * this.alpha; return new Truss(x0, y0, dx, dy, this.n, cells, this.cap_dx, this.cap_dy) }
    Truss.prototype.right = function () { var denominator = this.cap_dx * this.dx + this.cap_dy * this.dy; var L = this.d2 / denominator * (1 - this.alpha); var x0 = this.x0 + L * this.cap_dy; var y0 = this.y0 - L * this.cap_dx; var cells = this.disp_cells * (2 + this.n); var dx = this.dx * this.alpha; var dy = this.dy * this.alpha; return new Truss(x0, y0, dx, dy, this.n, cells, this.cap_dx, this.cap_dy) }
    Truss.prototype.support = function (i) { var sin_a = Math.sqrt(3) / 2; var cos_a = 1 / 2; var mirrored = (i % 2 == 0) ^ this.mirrored; if (mirrored) cos_a = -cos_a; var dx = this.alpha * (this.dx * cos_a + this.dy * sin_a); var dy = this.alpha * (this.dy * cos_a - this.dx * sin_a); var x0 = this.x0 + i * this.dx / (sin_a); var y0 = this.y0 + i * this.dy / (sin_a); var cap_dx = this.dy * (1 - 2 * this.alpha); var cap_dy = -this.dx * (1 - 2 * this.alpha); var cells = this.n; var n = Math.round(this.n * 2); return new Truss(x0, y0, dx, dy, n, cells, cap_dx, cap_dy) }
    Truss.prototype.supports = function () {
        var support_array = []; for (var i = -this.disp_cells + 1; i < this.disp_cells; ++i)
            support_array.push(this.support(i)); return support_array
    }
    Truss.prototype.draw_raw = function (ctx) { var caps_d2 = this.cap_dx * this.cap_dx + this.cap_dy * this.cap_dy; var denominator = this.cap_dx * this.dx + this.cap_dy * this.dy; var L = caps_d2 / denominator + 1; var color = Math.round((1 - Math.pow(this.alpha * (2 + n0), 1)) * 255); ctx.lineWidth = Math.sqrt(this.d2) * 2; ctx.strokeStyle = "rgb(" + color + "," + color + "," + color + ")"; ctx.beginPath(); ctx.moveTo(this.x0 + L * this.dx, this.y0 + L * this.dy); ctx.lineTo(this.x0 - L * this.dx, this.y0 - L * this.dy); ctx.stroke(); ctx.closePath() }
    Truss.prototype.position = function (x, y) { var dx = x - this.x0; var dy = y - this.y0; var d = dx * this.dy - dy * this.dx; return d / this.d2 }
    Truss.prototype.draw = function (ctx) {
        var pos = [this.position(0, 0), this.position(0, 768), this.position(1024, 0), this.position(1024, 768)]; if (Math.min.apply(null, pos) > 1 || Math.max.apply(null, pos) < -1) { return }
        else if (this.d2 >= 2) { this.left().draw(ctx); this.right().draw(ctx); var supports = this.supports(); for (var i in supports) { supports[i].draw(ctx) } }
        else { this.draw_raw(ctx) }
    }
}
var truss = new Truss(512, 384, 256, 0, n0, 5, 512 * 3, 0); truss.draw(ctx); $(canvas).css('cursor', 'move'); var is_mouse_down = !1; var last_mouse_x = 0, last_mouse_y = 0; canvas.addEventListener("mousedown", function (evt) { is_mouse_down = !0; last_mouse_x = evt.clientX; last_mouse_y = evt.clientY }, !1); canvas.addEventListener("mouseup", function (evt) { is_mouse_down = !1 }, !1); canvas.addEventListener("mousemove", function (evt) { if (is_mouse_down) { var dx = evt.clientX - last_mouse_x; var dy = evt.clientY - last_mouse_y; last_mouse_x = evt.clientX; last_mouse_y = evt.clientY; truss.x0 += dx; truss.y0 += dy; truss.recompute(); ctx.clearRect(0, 0, canvas.width, canvas.height); truss.draw(ctx); draw_scale() } }, !1); var is_touch_down = !1; var last_touch_x = 0, last_touch_y = 0; canvas.addEventListener("touchstart", function (evt) { is_touch_down = !0; var touch = evt.touches[0]; last_touch_x = touch.clientX; last_touch_y = touch.clientY }, !1); canvas.addEventListener("touchend", function (evt) { is_touch_down = !1 }, !1); canvas.addEventListener("touchmove", function (evt) { if (is_touch_down) { var touch = evt.touches[0]; var dx = touch.clientX - last_touch_x; var dy = touch.clientY - last_touch_y; last_touch_x = touch.clientX; last_touch_y = touch.clientY; truss.x0 += dx; truss.y0 += dy; truss.recompute(); ctx.clearRect(0, 0, canvas.width, canvas.height); truss.draw(ctx); draw_scale() } }, !1); function scale(s)
{ truss.x0 = 512 + (truss.x0 - 512) * s; truss.y0 = 364 + (truss.y0 - 364) * s; truss.dx *= s; truss.dy *= s; truss.cap_dx *= s; truss.cap_dy *= s; truss.recompute(); ctx.clearRect(0, 0, canvas.width, canvas.height); truss.draw(ctx) }
var scale_zoom = 1.5; var scale_level = 0; draw_scale(); $("#zoomin").on('click touch', function () { scale(scale_zoom); ++scale_level; draw_scale() }); $("#zoomout").on('click touch', function () { if (scale_level > 0) { scale(1 / scale_zoom); --scale_level; draw_scale() } }); function draw_scale() { var magnify = Math.pow(scale_zoom, scale_level); var mag_level = Math.round(Math.log(magnify) / Math.LN10); magnify /= Math.pow(10, mag_level); ctx.fillStyle = "#000000"; ctx.fillRect(1000 - magnify * 100, 0, magnify * 100, 12); var units = ['m', 'mm', 'um', 'nm', 'pm', 'fm']; var number = Math.pow(10, (100 - mag_level) % 3 - 1); var unit = units[Math.floor((mag_level + 1) / 3)]; $('#text').html("" + number + unit) }